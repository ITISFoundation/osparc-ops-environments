# Monitoring
<source>
  @type monitor_agent
  bind 0.0.0.0
  port 24220
</source>

# Prometheus metrics
<source>
  @type prometheus
  bind 0.0.0.0
  port 24231
  metrics_path metrics
</source>

<system>
  workers 1
</system>

<source>
  @type prometheus_output_monitor
  interval 10
  <labels>
    hostname ${hostname}
  </labels>
</source>

# Input: Receive logs from Docker containers
<source>
  @type forward
  port 24224
  bind 0.0.0.0
  # Add source hostname to records
  source_hostname_key source_hostname
  resolve_hostname true
</source>

# Add additional metadata
<filter docker.**>
  @type record_transformer
  <record>
    hostname "#{Socket.gethostname}"
    fluentd_hostname "#{ENV['FLUENTD_HOSTNAME']}"
  </record>
</filter>

# Clean container names and set proper host field
<filter docker.**>
  @type record_transformer
  enable_ruby true
  remove_keys source_hostname  # Remove the redundant source_hostname field
  <record>
    # cleanup container names by removing leading slashes
    container_name ${record["container_name"] ? record["container_name"].sub(/^\//, '') : record["container_name"]}
    # Use source hostname from forward input as the host field for GELF
    host ${record["source_hostname"] || record["source"] || record["_hostname"] || "unknown"}
  </record>
</filter>


# Output to both Graylog (GELF) and Loki
<match docker.**>
  @type copy

  # Output to Graylog using GELF
  <store>
    @type gelf
    host logging_graylog
    port 12201
    protocol udp
    add_msec_time true
    flush_interval 5s
    # Use the host field from record for GELF host field
    use_record_host true
    # Map the correct fields for Graylog
    <format>
      @type json
    </format>
    <buffer>
      @type file
      path /fluentd/buffer/graylog
      flush_thread_count 8
      flush_interval 5s
      retry_forever false
      retry_timeout 1h
      retry_max_times 30
      retry_randomize true
      chunk_limit_size 8M
      total_limit_size 2G
      overflow_action drop_oldest_chunk
      flush_mode interval
    </buffer>
    <secondary>
      @type file
      path /fluentd/log/graylog-error
      append true
      <format>
        @type json
      </format>
    </secondary>
  </store>

  # Output to Loki
  <store>
    @type loki
    url "#{ENV['LOKI_URL']}"
    extra_labels {"job": "docker"}
    line_format json
    username ""
    password ""
    flush_interval 5s
    <buffer>
      @type file
      path /fluentd/buffer/loki
      flush_thread_count 8
      flush_interval 5s
      retry_forever false
      retry_max_interval 30
      retry_max_times 30
      retry_randomize true
      chunk_limit_size 8M
      total_limit_size 2G
    </buffer>
    <secondary>
      @type file
      path /fluentd/log/loki-error
      append true
      <format>
        @type json
      </format>
    </secondary>
  </store>
</match>
