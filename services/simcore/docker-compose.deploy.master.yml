services:
  autoscaling:
    deploy:
      replicas: 0
  agent:
    volumes:
      - /docker/volumes/:/docker/volumes/
  postgres:
    labels:
      - "pgbackup.enable=true"
    deploy:
      placement:
        constraints:
          - node.labels.postgres==true
  dask-sidecar:
    environment:
      - SIDECAR_LOGLEVEL=INFO
  traefik:
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--ping=true"
      - "--entryPoints.ping.address=:9082"
      - "--ping.entryPoint=ping"
      - "--log.level=${SIMCORE_TRAEFIK_LOGLEVEL}"
      - "--accesslog=false"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.http.forwardedHeaders.insecure"
      - "--entryPoints.http.transport.respondingTimeouts.idleTimeout=21600s" #6h, for https://github.com/traefik/traefik/issues/10805
      - "--entryPoints.http.transport.respondingTimeouts.writeTimeout=21600s" #6h, for https://github.com/traefik/traefik/issues/10805
      - "--entryPoints.http.transport.respondingTimeouts.readTimeout=21600s" #6h, for https://github.com/traefik/traefik/issues/10805
      - "--entryPoints.postgres.address=:5432"
      - "--entryPoints.redis.address=:${REDIS_EXTERNAL_PORT}"
      - "--entryPoints.simcore_api.address=:10081"
      - "--entryPoints.simcore_api.forwardedHeaders.insecure"
      - "--entryPoints.simcore_api.transport.respondingTimeouts.idleTimeout=21600s" #6h, for https://github.com/traefik/traefik/issues/10805
      - "--entryPoints.simcore_api.transport.respondingTimeouts.writeTimeout=21600s" #6h, for https://github.com/traefik/traefik/issues/10805
      - "--entryPoints.simcore_api.transport.respondingTimeouts.readTimeout=21600s" #6h, for https://github.com/traefik/traefik/issues/10805
      - "--entryPoints.traefik_monitor.address=:8080"
      - "--entryPoints.traefik_monitor.forwardedHeaders.insecure"
      - "--providers.swarm.endpoint=unix:///var/run/docker.sock"
      - "--providers.swarm.network=${SWARM_STACK_NAME}_default"
      # https://github.com/traefik/traefik/issues/7886
      - "--providers.swarm.refreshSeconds=1"
      - "--providers.swarm.exposedByDefault=false"
      - "--providers.swarm.constraints=Label(`io.simcore.zone`, `${TRAEFIK_SIMCORE_ZONE}`)"
      - "--tracing.serviceName=simcore-traefik"
      - "--tracing.otlp.http.endpoint=http://otel-collector:4318/v1/traces"
    deploy:
      resources:
        limits:
          memory: 2048M
          cpus: '2.000'
      labels:
        # postgres
        - traefik.tcp.routers.${SWARM_STACK_NAME}_postgresRoute.entrypoints=postgres
        - traefik.tcp.routers.${SWARM_STACK_NAME}_postgresRoute.tls=false
        - traefik.tcp.routers.${SWARM_STACK_NAME}_postgresRoute.service=${SWARM_STACK_NAME}_postgresRoute
        - traefik.tcp.services.${SWARM_STACK_NAME}_postgresRoute.loadbalancer.server.port=5432
        - "traefik.tcp.routers.${SWARM_STACK_NAME}_postgresRoute.rule=ClientIP(`10.0.0.0/8`) || ClientIP(`172.16.0.0/12`) || ClientIP(`192.168.0.0/16`)"
        # redis
        - traefik.tcp.routers.${SWARM_STACK_NAME}_redisRoute.entrypoints=redis
        - traefik.tcp.routers.${SWARM_STACK_NAME}_redisRoute.tls=false
        - traefik.tcp.routers.${SWARM_STACK_NAME}_redisRoute.service=${SWARM_STACK_NAME}_redisRoute
        - traefik.tcp.services.${SWARM_STACK_NAME}_redisRoute.loadbalancer.server.port=${REDIS_EXTERNAL_PORT}
        - "traefik.tcp.routers.${SWARM_STACK_NAME}_redisRoute.rule=HostSNI(`*`)"

  clusters-keeper:
    deploy:
      replicas: 0

  payments:
    deploy:
      replicas: 1

  webserver:
    deploy:
      replicas: 3

  wb-api-server:
    deploy:
      replicas: 3

  redis:
    networks:
      - public
    deploy:
      labels:
        - traefik.enable=true
        - io.simcore.zone=${TRAEFIK_SIMCORE_ZONE}
        - traefik.swarm.network=${SWARM_STACK_NAME}_default
        - "traefik.tcp.routers.${SWARM_STACK_NAME}_redis.rule=ClientIP(`10.0.0.0/8`) || ClientIP(`172.16.0.0/12`) || ClientIP(`192.168.0.0/16`)"
        - traefik.tcp.routers.${SWARM_STACK_NAME}_redis.entrypoints=redis
        - traefik.tcp.routers.${SWARM_STACK_NAME}_redis.tls=false
        - traefik.tcp.routers.${SWARM_STACK_NAME}_redis.service=${SWARM_STACK_NAME}_redis
        - traefik.tcp.services.${SWARM_STACK_NAME}_redis.loadbalancer.server.port=${REDIS_PORT}

  rabbit:
    # rabbit is already exposed via ops traefik
    # adding one more route to this configuration
    deploy:
      labels:
        - "traefik.tcp.routers.${SWARM_STACK_NAME}_rabbitmq.rule=ClientIP(`10.0.0.0/8`) || ClientIP(`172.16.0.0/12`) || ClientIP(`192.168.0.0/16`)"
        - traefik.tcp.routers.${SWARM_STACK_NAME}_rabbitmq.entrypoints=rabbitmq
        - traefik.tcp.routers.${SWARM_STACK_NAME}_rabbitmq.tls=false
        - traefik.tcp.routers.${SWARM_STACK_NAME}_rabbitmq.service=${SWARM_STACK_NAME}_rabbitmq
        - traefik.tcp.services.${SWARM_STACK_NAME}_rabbitmq.loadbalancer.server.port=${RABBIT_PORT}
