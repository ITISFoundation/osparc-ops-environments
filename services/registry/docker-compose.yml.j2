version: "3.7"
services:
  registry:
    image: registry:2.8.3
    command: ["/bin/sh", "/etc/docker/registry/init"]
    environment:
      REGISTRY_HTTP_HOST: "https://${REGISTRY_DOMAIN}"
      REGISTRY_HTTP_SECRET: ${REGISTRY_HTTP_SECRET}
      REGISTRY_STORAGE: s3
      REGISTRY_STORAGE_S3_ACCESSKEY: ${REGISTRY_S3_ACCESS_KEY}
      REGISTRY_STORAGE_S3_SECRETKEY: ${REGISTRY_S3_SECRET_KEY}
      REGISTRY_STORAGE_S3_REGIONENDPOINT: "${REGISTRY_S3_ENDPOINT}"
      REGISTRY_STORAGE_S3_SECURE: "true"
      REGISTRY_STORAGE_S3_BUCKET: ${REGISTRY_S3_BUCKET}
      REGISTRY_STORAGE_S3_REGION: ${REGISTRY_AWS_REGION}
      REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR: inmemory
      REGISTRY_STORAGE_REDIRECT_DISABLE: "true"
      REGISTRY_STORAGE_DELETE_ENABLED: "true"
      # Read-only mode - MANDATORY to use the garbage collector
      #REGISTRY_STORAGE_MAINTENANCE: |-
      #  uploadpurging:
      #      enabled: false
      #  readonly:
      #      enabled: true
      # Metrics
      REGISTRY_HTTP_DEBUG_ADDR: ":5001"
      REGISTRY_HTTP_DEBUG_PROMETHEUS_ENABLED: "true"
      REGISTRY_HTTP_DEBUG_PROMETHEUS_PATH: "/metrics"
      # Logs
      REGISTRY_LOG_LEVEL: ${REGISTRY_LOG_LEVEL}
      REGISTRY_LOG_ACCESSLOG_DISABLED: ${REGISTRY_LOG_ACCESSLOG_DISABLED}
      # set to true if using self-signed certificates
      UPDATE_CERTIFICATES: "false"
    networks:
      - public
      - monitored
    deploy:
      replicas: ${OPS_REGISTRY_REPLICAS}
      update_config:
        order: start-first
        delay: 10s
        failure_action: rollback
        parallelism: 1
      placement:
        constraints:
          - node.labels.ops==true
      resources:
        limits:
          memory: 1G
          cpus: '2'
        reservations:
          memory: 128M
          cpus: '0.1'
      labels:
        - traefik.enable=true
        - traefik.swarm.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.registry.loadbalancer.server.port=5000
        - traefik.http.routers.registry.rule=Host(`${REGISTRY_DOMAIN}`)
        - traefik.http.routers.registry.entrypoints=https
        - traefik.http.routers.registry.tls=true
        - traefik.http.routers.registry.middlewares=ops_gzip@swarm, ops_auth@swarm
        - prometheus-job=registry
        - prometheus-port=5001

    configs:
      - source: registry_init
        target: /etc/docker/registry/init
        mode: 0755
      - source: nsswitch_conf
        target: /etc/nsswitch.conf
        mode: 0644
      - source: registry_config.yml
        target: /etc/docker/registry/config.yml
{%- if REGISTRY_PULL_THROUGH_CACHE_ENABLED == "true" %}
  registry-pull-through-cache:
    {%- raw %}
    hostname: "registry-ptc-{{.Node.Hostname}}-{{.Task.Slot}}"
    {%- endraw %}
    image: registry:2.8.3
    environment:
      REGISTRY_HTTP_SECRET: ${REGISTRY_PULL_THROUGH_CACHE_HTTP_SECRET}
      # S3
      REGISTRY_STORAGE: s3
      REGISTRY_STORAGE_S3_ACCESSKEY: ${REGISTRY_S3_ACCESS_KEY}
      REGISTRY_STORAGE_S3_SECRETKEY: ${REGISTRY_S3_SECRET_KEY}
      REGISTRY_STORAGE_S3_REGIONENDPOINT: "${REGISTRY_S3_ENDPOINT}"
      REGISTRY_STORAGE_S3_SECURE: "true"
      REGISTRY_STORAGE_S3_BUCKET: ${REGISTRY_PULL_THROUGH_CACHE_S3_BUCKET}
      REGISTRY_STORAGE_S3_REGION: ${REGISTRY_AWS_REGION}
      REGISTRY_STORAGE_DELETE_ENABLED: "true"
      # Pull through cache
      REGISTRY_PROXY_REMOTEURL: "https://registry-1.docker.io"
      REGISTRY_PROXY_USERNAME: ${DOCKER_HUB_LOGIN}
      REGISTRY_PROXY_PASSWORD: ${DOCKER_HUB_PASSWORD}
      # Metrics
      REGISTRY_HTTP_DEBUG_ADDR: ":5001"
      REGISTRY_HTTP_DEBUG_PROMETHEUS_ENABLED: "true"
      REGISTRY_HTTP_DEBUG_PROMETHEUS_PATH: "/metrics"
      # Logs
      REGISTRY_LOG_LEVEL: ${REGISTRY_PULL_THROUGH_CACHE_LOG_LEVEL}
      REGISTRY_LOG_ACCESSLOG_DISABLED: ${REGISTRY_PULL_THROUGH_CACHE_LOG_ACCESSLOG_DISABLED}
    ports:
    - mode: host
      target: 5000
      published: 5000
    networks:
      - monitored
    deploy:
      mode: global
      update_config:
        order: start-first
        delay: 10s
        failure_action: rollback
        parallelism: 1
      placement:
        constraints:
          - node.labels.ops==true
      resources:
        limits:
          memory: 1G
          cpus: '2'
        reservations:
          memory: 128M
          cpus: '0.1'
      labels:
        - prometheus-job=registry-pull-through-cache
        - prometheus-port=5001
{%- endif %}

networks:
  public:
    external: true
    name: ${PUBLIC_NETWORK}
  monitored:
    name: ${MONITORED_NETWORK}
    external: true

configs:
  registry_config.yml:
    name: ${STACK_NAME}_registry_config_{{ "./config.yml" | sha256file | substring(0,10) }}
    file: ./config.yml
  nsswitch_conf:
    name: ${STACK_NAME}_nsswitch_conf_{{ "./nsswitch.conf" | sha256file | substring(0,10) }}
    file: ./nsswitch.conf
  registry_init:
    name: ${STACK_NAME}_registry_init_{{ "./init" | sha256file | substring(0,10) }}
    file: ./init
