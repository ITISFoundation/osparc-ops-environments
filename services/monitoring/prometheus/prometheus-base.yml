#  global config
#  DOLLAR SIGNS NEED TO BE EXCAPED (see https://stackoverflow.com/a/61259844/10198629)
global:
  scrape_interval: 20s # By default, scrape targets every 15 seconds.
  evaluation_interval: 20s # By default, scrape targets every 15 seconds.
  # scrape_timeout global default would be (10s).

  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
    monitor: "sim-core-monitor"

# Load and evaluate rules in this file every 'evaluation_interval' seconds.
rule_files:
  - "alert.rules"
  - "prometheus.rules.yml"

# alert
alerting:
  alertmanagers:
    - scheme: http
      static_configs:
        - targets:
            - "alertmanager:9093"

# A scrape configuration containing exactly one endpoint to scrape:
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.

  # Create a job for Docker daemons. see [https://prometheus.io/docs/guides/dockerswarm/]
  - job_name: "docker-engines"
    dockerswarm_sd_configs:
      - host: unix:///var/run/docker.sock
        role: nodes # this scrapes docker nodes
    relabel_configs:
      # Fetch metrics on port 9323.
      - source_labels: [__meta_dockerswarm_node_address]
        target_label: __address__
        replacement: $${empty_var}1:9323
      # Set hostname as instance label
      - source_labels: [__meta_dockerswarm_node_hostname]
        target_label: instance

  # Create a job for Docker Swarm containers.
  # Prometheus docker swarm discovery will automatically discover services that need to be scraped by prometheus
  # All services that need to be monitored must at least define the following SERVICE labels (in deploy/labels section):
  # deploy:
  #   labels:
  #     # prometheus labels
  #     - prometheus-job=traefik_ops
  #     - prometheus-port=8082
  #
  - job_name: "dockerswarm-tasks"
    dockerswarm_sd_configs:
      - host: unix:///var/run/docker.sock
        role: tasks # this scrapes docker tasks
    relabel_configs:
      # keep only metrics that are available over monitored network
      - source_labels: [__meta_dockerswarm_network_name]
        regex: ${MONITORED_NETWORK}
        action: keep
      # Only keep containers that should be running
      - source_labels: [__meta_dockerswarm_task_desired_state]
        regex: running
        action: keep
      # Only keep containers that have a `prometheus-job` label.
      - source_labels: [__meta_dockerswarm_service_label_prometheus_job]
        regex: .+
        action: keep
      # Keep the containers IP and Port, very necessary for our setup DONT MESS WITH THIS
      - source_labels:
          [__address__, __meta_dockerswarm_service_label_prometheus_port]
        separator: ";"
        regex: "(.*):.*;(.*)"
        target_label: __address__
        replacement: $${empty_var}1:$${empty_var}2
      #
      # Use the prometheus-port Swarm label as Prometheus job port.
      - source_labels: [__meta_dockerswarm_service_label_prometheus_job]
        target_label: job
      # Set hostname as instance label
      - source_labels: [__meta_dockerswarm_node_hostname]
        target_label: instance
    # Toss container address:
      #- action: labeldrop
      #  regex: __address__
    metric_relabel_configs:
      #
      # These are WORK_IN_PROGRESS: This might in the future add the service limits and reservations as unique prometheus labels, but
      # this would require soffisticated regex parsing
      # To use these: # KEEP: container_label_simcore_service_settings
      #
      #- source_labels: [container_label_simcore_service_settings]
      #  separator: ;
      #  regex: '^\"(.*)?(\"type\": \"Resources\", \"value\": \{\"Limits\": (\{".*\})?\{\"NanoCPUs\": )(\d*)([,\}])'
      #  target_label: docker_service_resources_nanocpu_limit
      #  replacement: ${4}
      #  action: replace
      #- source_labels: [container_label_simcore_service_settings]
      #  separator: ;
      #  regex: '^\"(.*)?(\"type\": \"Resources\", \"value\": \{\"Limits\": \{)(\{".*\})?(\".*\"\: \d+[,\}] )?(\"MemoryBytes\": )(\d*)([\}])'
      #  target_label: docker_service_resources_memorybytes_limit
      #  replacement: ${6}
      #  action: replace
      #- source_labels: [container_label_simcore_service_settings]
      #  separator: ;
      #  regex: '^\"(.*)?(\"type\": \"Resources\", \"value\": \{)("Limits".*, )?(\"Reservations\": (\{".*\})?\{\"NanoCPUs\": )(\d*)([,\}])'
      #  target_label: docker_service_resources_nanocpu_reservation
      #  replacement: ${6}
      #  action: replace
      #- source_labels: [container_label_simcore_service_settings]
      #  separator: ;
      #  regex: '^\"(.*)?(\"type\": \"Resources\", \"value\": \{)(.*, )?(\"Reservations\": )(\{".*\})?\{(".*": \d+[,\}] )?(\"MemoryBytes\": )(\d*)([,\}])'
      #  target_label: docker_service_resources_nanocpu_reservation
      #  replacement: ${8}
      #  action: replace
      #- source_labels: [container_label_simcore_service_settings]
      #  separator: ;
      #  regex: '^"(.*)?("GenericResources": \[\{"DiscreteResourceSpec": )(.*)(\{"Kind": "VRAM", "Value": )(\d+)'
      #  target_label: docker_service_resources_vram_reservation
      #  replacement: ${5}
      #  action: replace
      #- source_labels: [container_label_simcore_service_settings]
      #  separator: ;
      #  regex: '^"(.*)?("GenericResources": \[\{"DiscreteResourceSpec": )(.*)(\{"Kind": "AIRAM", "Value": )(\d+)'
      #  target_label: docker_service_resources_vram_reservation
      #  replacement: ${5}
      #  action: replace
      - regex: "container_label_com_docker_compose_config_hash"
        action: labeldrop  # cAdvisor pruning
      - regex: "container_label_com_docker_compose_container_number"
        action: labeldrop  # cAdvisor pruning
      - regex: "container_label_io_simcore_.*"
        action: labeldrop  # cAdvisor pruning
      - regex: "container_label_simcore_service_compose_spec"
        action: labeldrop  # cAdvisor pruning
      - regex: "container_label_simcore_service_container_http_entrypoint"
        action: labeldrop  # cAdvisor pruning
      - regex: "container_label_simcore_service_paths_mapping"
        action: labeldrop  # cAdvisor pruning
      - regex: "container_label_org_.*"
        action: labeldrop  # cAdvisor pruning
      - regex: "container_label_com_docker_compose_project"
        action: labeldrop  # cAdvisor pruning
      - regex: "container_label_com_docker_compose_project_config_files"
        action: labeldrop  # cAdvisor pruning
      - regex: "container_label_com_docker_compose_service"
        action: labeldrop  # cAdvisor pruning
      - regex: "container_label_com_docker_compose_project"
        action: labeldrop  # cAdvisor pruning
      - regex: "container_label_maintainer"
        action: labeldrop  # cAdvisor pruning


### Used:
# container_label_com_docker_swarm_node_id
# container_label_com_docker_swarm_service_name
