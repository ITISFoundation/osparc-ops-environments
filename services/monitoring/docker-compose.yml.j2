version: "3.7"

services:
  cadvisor-exporter:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitored
    command: --logtostderr --docker_only --allow_dynamic_housekeeping=true
    deploy:
      labels:
        - prometheus-job=cadvisor
        - prometheus-port=8080
      mode: global
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
          cpus: "0.1"
  prometheuscatchall:
    hostname: "{% raw %}{{.Service.Name}}{% endraw %}"
    image: prom/prometheus:v2.55.1
    volumes:
      - prometheus_data:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root # only user root can use the docker socket
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_rules
        target: /etc/prometheus/prometheus.rules.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention=${MONITORING_PROMETHEUS_RETENTION}"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.external-url=https://${MONITORING_DOMAIN}/prometheus/"
      - "--web.route-prefix=/"
      - "--storage.tsdb.allow-overlapping-blocks" # via https://jessicagreben.medium.com/prometheus-fill-in-data-for-new-recording-rules-30a14ccb8467
      #- "--web.enable-admin-api" This allows messing with prometheus using its API from the CLI. Disabled for security reasons by default.
    networks:
      - monitored
      - public
    extra_hosts: []
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.prometheuscatchall.loadbalancer.server.port=${MONITORING_PROMETHEUS_PORT}
        - traefik.http.routers.prometheuscatchall.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/prometheus`)
        - traefik.http.routers.prometheuscatchall.entrypoints=https
        - traefik.http.routers.prometheuscatchall.tls=true
        - traefik.http.middlewares.prometheuscatchall_stripprefixregex.stripprefixregex.regex=^/prometheus
        - traefik.http.routers.prometheuscatchall.middlewares=ops_whitelist_ips@swarm, ops_auth@swarm, ops_gzip@swarm, prometheuscatchall_stripprefixregex
        - prometheus-job=prometheuscatchall
        - prometheus-port=${MONITORING_PROMETHEUS_PORT}
      resources:
        limits:
          memory: 4096M
          cpus: "2"
        reservations:
          memory: 2048M
          cpus: "0.2"
  prometheusfederation:
    hostname: "{% raw %}{{.Service.Name}}{% endraw %}"
    image: prom/prometheus:v2.55.1
    volumes:
      - prometheus_data_federation:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root # only user root can use the docker socket
    configs:
      - source: prometheus_config_federation
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_rules
        target: /etc/prometheus/prometheus.rules.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention=${MONITORING_PROMETHEUS_FEDERATION_RETENTION}"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.external-url=https://${MONITORING_DOMAIN}/prometheusfederation/"
      - "--web.route-prefix=/"
      - "--storage.tsdb.allow-overlapping-blocks" # via https://jessicagreben.medium.com/prometheus-fill-in-data-for-new-recording-rules-30a14ccb8467
      #- "--web.enable-admin-api" This allows messing with prometheus using its API from the CLI. Disabled for security reasons by default.
    networks:
      - monitored
      - public
    extra_hosts: []
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.prometheusfederation.loadbalancer.server.port=${MONITORING_PROMETHEUS_PORT}
        - traefik.http.routers.prometheusfederation.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/prometheusfederation`)
        - traefik.http.routers.prometheusfederation.entrypoints=https
        - traefik.http.routers.prometheusfederation.tls=true
        - traefik.http.middlewares.prometheusfederation_stripprefixregex.stripprefixregex.regex=^/prometheusfederation
        - traefik.http.routers.prometheusfederation.middlewares=ops_whitelist_ips@swarm, ops_auth@swarm, ops_gzip@swarm, prometheusfederation_stripprefixregex
        - prometheus-job=prometheusfederation
        - prometheus-port=${MONITORING_PROMETHEUS_PORT}
      resources:
        limits:
          memory: 4096M
          cpus: "2"
        reservations:
          memory: 64M
          cpus: "0.2"
  node-exporter:
    image: prom/node-exporter:v1.8.2
    volumes:
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /proc:/host/proc:ro
      - /etc/hostname:/etc/nodename # doesn't work with windows
    configs:
      - source: node_exporter_entrypoint
        target: /docker-entrypoint.sh
    environment:
      - NODE_ID={{ '{{.Node.ID}}' }}
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
      - "--collector.textfile.directory=/home/"
      - "--collector.meminfo_numa"
      - "--no-collector.ipvs"
    entrypoint:
      - /bin/sh
      - /docker-entrypoint.sh
    networks:
      - monitored
    deploy:
      labels:
        - prometheus-job=node-exporter
        - prometheus-port=9100
      mode: global
      resources:
        limits:
          memory: 128M
          cpus: "0.5"
        reservations:
          memory: 64M
          cpus: "0.1"

  nvidia-exporter:
    image: mindprince/nvidia_gpu_prometheus_exporter:0.1
    networks:
      - monitored
    deploy:
      labels:
        - prometheus-job=nvidia-exporter
        - prometheus-port=9445
      placement:
        constraints:
          - node.labels.gpu==true
      mode: global
      resources:
        limits:
          memory: 64M
          cpus: "0.5"
        reservations:
          memory: 32M
          cpus: "0.1"

  alertmanager:
    image: prom/alertmanager:v0.27.0
    volumes:
      - alertmanager_data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    networks:
      - monitored
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/config.yml
    deploy:
      placement:
        constraints:
          - node.role==manager
      resources:
        limits:
          memory: 32M
          cpus: "0.5"
        reservations:
          memory: 16M
          cpus: "0.1"

  docker-events-exporter:
    image: itisfoundation/docker-events-exporter:latest
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root # only user root can use the docker socket
    networks:
      - monitored
    deploy:
      labels:
        - prometheus-job=docker-events-exporter
        - prometheus-port=8000
      mode: global
      resources:
        limits:
          memory: 64M
          cpus: "0.5"
        reservations:
          memory: 32M
          cpus: "0.1"

  grafana:
    image: grafana/grafana-oss:12.0.0
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - ./grafana/config.monitoring
    user: "104"
    networks:
      - monitored # needed to access postgres
      - public
    deploy:
      #restart_policy:
      #  condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.grafana.loadbalancer.server.port=3000
        - traefik.http.routers.grafana.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/grafana`)
        - traefik.http.routers.grafana.entrypoints=https
        - traefik.http.routers.grafana.tls=true
        - traefik.http.middlewares.grafana_replace_regex.replacepathregex.regex=^/grafana/?(.*)$$
        - traefik.http.middlewares.grafana_replace_regex.replacepathregex.replacement=/$${1}
        - traefik.http.routers.grafana.middlewares=ops_whitelist_ips@swarm, ops_gzip@swarm, grafana_replace_regex
      resources:
        limits:
          memory: 256M
          cpus: "1.0"
        reservations:
          memory: 128M
          cpus: "0.1"

  smokeping-prober-exporter:
    image: quay.io/superq/smokeping-prober:v0.8.1
    networks:
      - monitored
    volumes: []
    cap_add:
      - 'NET_ADMIN'
      - 'NET_RAW'
    entrypoint:
      /bin/smokeping_prober --config.file=/smokeping_prober_config.yaml
    configs:
      - source: smokeping_prober_config
        target: /smokeping_prober_config.yaml
    deploy:
      labels:
        - prometheus-job=smokeping-prober-exporter
        - prometheus-port=9374
      mode: global
      resources:
        limits:
          memory: 128M
          cpus: "0.5"
        reservations:
          memory: 32M
          cpus: "0.1"

  dcgm-exporter:
    cap_add:
      - SYS_ADMIN
    image: nvcr.io/nvidia/k8s/dcgm-exporter:3.3.7-3.5.0-ubuntu22.04
    hostname: '{{'{{.Node.Hostname}}'}}'
    networks:
      - monitored
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.gpu==true
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.1"
      labels:
      - prometheus-job=dcgm-exporter
      - prometheus-port=9400

  pgsql-query-exporter:
    image: ghcr.io/albertodonato/query-exporter:sha-a1d908e
    volumes: []
    dns:
      - 8.8.8.8
    configs:
      - source: pgsql_query_exporter_config
        target: /config/config.yaml
    networks:
      - monitored
      - public
    extra_hosts: []
    deploy:
      labels:
      - prometheus-job=pgsql-query-exporter
      - prometheus-port=9560
      placement:
        constraints:
          - node.labels.prometheus==true
      resources:
        limits:
          memory: 128M
          cpus: "0.5"
        reservations:
          memory: 64M
          cpus: "0.1"
  postgres-exporter:
    image: bitnami/postgres-exporter:0.15.0
    networks:
      - monitored
    environment:
      - DATA_SOURCE_NAME=postgresql://{{POSTGRES_USER}}:{{POSTGRES_PASSWORD}}@{{POSTGRES_HOST}}:{{POSTGRES_PORT}}/{{POSTGRES_DB}}?sslmode=disable
    deploy:
      labels:
      - prometheus-job=postgres-exporter
      - prometheus-port=9187
      placement:
        constraints:
          - node.labels.prometheus==true
      resources:
        limits:
          memory: 128M
          cpus: "0.5"
        reservations:
          memory: 32M
          cpus: "0.1"
  redis-exporter:
    image: oliver006/redis_exporter:v1.69.0-alpine
    networks:
      - monitored
    environment:
      REDIS_ADDR: ${REDIS_ADDRESS}
{%- if REDIS_USER %}
      REDIS_USER: ${REDIS_USER}
{%- endif %}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_EXPORTER_CHECK_KEYS: db0=user_id*client_session_id*alive,db0=user_id*client_session_id*resources,db1=project_lock*,db3=*
    deploy:
      labels:
      - prometheus-job=redis-exporter
      - prometheus-port=9121
      placement:
        constraints:
          - node.labels.prometheus==true
      resources:
        limits:
          memory: 64M
          cpus: "0.5"
        reservations:
          memory: 32M
          cpus: "0.1"
  tempo:
    image: grafana/tempo:2.7.2
    command: "-target=scalable-single-binary -config.file=/etc/tempo.yaml"
    configs:
      - source: tempo_config
        target: /etc/tempo.yaml
    networks:
      - monitored
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        - traefik.http.services.tempo.loadbalancer.server.port=9095
        - traefik.http.routers.tempo.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/tempo`)
        - traefik.http.routers.tempo.priority=10
        - traefik.http.routers.tempo.entrypoints=https
        - traefik.http.routers.tempo.tls=true
        - traefik.http.middlewares.tempo_replace_regex.replacepathregex.regex=^/tempo/?(.*)$$
        - traefik.http.middlewares.tempo_replace_regex.replacepathregex.replacement=/$${1}
        - traefik.http.routers.tempo.middlewares=ops_whitelist_ips@swarm, ops_gzip@swarm, tempo_replace_regex
      resources:
        limits:
          memory: 2000M
          cpus: "2.0"

configs:
  alertmanager_config:
    name: ${STACK_NAME}_alertmanager_config_{{ "./alertmanager/config.yml" | sha256file | substring(0,10) }}
    file: ./alertmanager/config.yml
  tempo_config:
    name: ${STACK_NAME}_tempo_config_{{ "./tempo_config.yaml" | sha256file | substring(0,10) }}
    file: ./tempo_config.yaml
  node_exporter_entrypoint:
    name: ${STACK_NAME}_node_exporter_entrypoint_{{ "./node-exporter/docker-entrypoint.sh" | sha256file | substring(0,10) }}
    file: ./node-exporter/docker-entrypoint.sh
  prometheus_config_federation:
    name: ${STACK_NAME}_prometheus_config_federation_{{ "./prometheus/prometheus-federation.yml" | sha256file | substring(0,10) }}
    file: ./prometheus/prometheus-federation.yml
  prometheus_rules:
    name: ${STACK_NAME}_prometheus_rules_{{ "./prometheus/prometheus.rules.yml" | sha256file | substring(0,10) }}
    file: ./prometheus/prometheus.rules.yml
  pgsql_query_exporter_config:
    name: ${STACK_NAME}_pgsql_query_exporter_config_{{ "./pgsql_query_exporter_config.yaml" | sha256file | substring(0,10) }}
    file: ./pgsql_query_exporter_config.yaml
  smokeping_prober_config:
    name: ${STACK_NAME}_smokeping_prober_config_{{ "./smokeping_prober_config.yaml" | sha256file | substring(0,10) }}
    file: ./smokeping_prober_config.yaml

volumes:
  prometheus_data: {}
  grafana_data: {}
  alertmanager_data: {}
  prometheus_data_federation: {}

networks:
  monitored:
    name: ${MONITORED_NETWORK}
    external: true
  public:
    external: true
    name: ${PUBLIC_NETWORK}
