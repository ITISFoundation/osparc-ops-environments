version: "3.7"

volumes:
  prometheus_data: {}
  grafana_data: {}
  alertmanager_data: {}
  prometheus_data_cadvisor: {}

networks:
  internal:
    driver: overlay
    attachable: true
  monitored:
    name: ${MONITORED_NETWORK}
    external: true
  public:
    external: true
    name: ${PUBLIC_NETWORK}

configs:
  alertmanager_config:
    file: ./alertmanager/config.yml
  node_exporter_entrypoint:
    file: ./node-exporter/docker-entrypoint.sh
  prometheus_config:
    file: ./prometheus/prometheus.yml
  prometheus_config_cadvisor:
    file: ./prometheus/prometheus-cadvisor.yml
  prometheus_rules:
    file: ./prometheus/prometheus.rules.yml
  grafana_image_renderer_config:
    file: ./grafana-image-renderer/config.json
  pgsql_query_exporter_config:
    file: ./pgsql_query_exporter_config.yaml
  smokeping_prober_config:
    file: ./smokeping_prober_config.yaml
services:
  prometheuscatchall:
    hostname: "{% raw %}{{.Service.Name}}{% endraw %}"
    image: prom/prometheus:v2.46.0
    volumes:
      - prometheus_data:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root # only user root can use the docker socket
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_rules
        target: /etc/prometheus/prometheus.rules.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention=${MONITORING_PROMETHEUS_RETENTION}"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.external-url=https://${MONITORING_DOMAIN}/prometheus/"
      - "--web.route-prefix=/"
      - "--storage.tsdb.allow-overlapping-blocks" # via https://jessicagreben.medium.com/prometheus-fill-in-data-for-new-recording-rules-30a14ccb8467
      #- "--web.enable-admin-api" This allows messing with prometheus using its API from the CLI. Disabled for security reasons by default.
    networks:
      - internal
      - monitored
      - public
    extra_hosts: []
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.prometheuscatchall.loadbalancer.server.port=${MONITORING_PROMETHEUS_PORT}
        - traefik.http.routers.prometheuscatchall.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/prometheus`)
        - traefik.http.routers.prometheuscatchall.entrypoints=https
        - traefik.http.routers.prometheuscatchall.tls=true
        - traefik.http.middlewares.prometheuscatchall_stripprefixregex.stripprefixregex.regex=^/prometheus
        - traefik.http.routers.prometheuscatchall.middlewares=ops_whitelist_ips@docker, ops_auth@docker, ops_gzip@docker, prometheuscatchall_stripprefixregex
        - prometheus-job=prometheuscatchall
        - prometheus-port=${MONITORING_PROMETHEUS_PORT}
      resources:
        limits:
          memory: 4096M
        reservations:
          memory: 4096M
  prometheuscadvisor:
    hostname: "{% raw %}{{.Service.Name}}{% endraw %}"
    image: prom/prometheus:v2.46.0
    volumes:
      - prometheus_data_cadvisor:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root # only user root can use the docker socket
    configs:
      - source: prometheus_config_cadvisor
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_rules
        target: /etc/prometheus/prometheus.rules.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention=30d"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.external-url=https://${MONITORING_DOMAIN}/prometheuscadvisor/"
      - "--web.route-prefix=/"
      - "--storage.tsdb.allow-overlapping-blocks" # via https://jessicagreben.medium.com/prometheus-fill-in-data-for-new-recording-rules-30a14ccb8467
      #- "--web.enable-admin-api" This allows messing with prometheus using its API from the CLI. Disabled for security reasons by default.
    networks:
      - internal
      - monitored
      - public
    extra_hosts: []
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.prometheuscadvisor.loadbalancer.server.port=${MONITORING_PROMETHEUS_PORT}
        - traefik.http.routers.prometheuscadvisor.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/prometheuscadvisor`)
        - traefik.http.routers.prometheuscadvisor.entrypoints=https
        - traefik.http.routers.prometheuscadvisor.tls=true
        - traefik.http.middlewares.prometheuscadvisor_stripprefixregex.stripprefixregex.regex=^/prometheuscadvisor
        - traefik.http.routers.prometheuscadvisor.middlewares=ops_whitelist_ips@docker, ops_auth@docker, ops_gzip@docker, prometheuscadvisor_stripprefixregex
        - prometheus-job=prometheuscadvisor
        - prometheus-port=${MONITORING_PROMETHEUS_PORT}
      resources:
        limits:
          memory: 4096M
        reservations:
          memory: 4096M
  node-exporter:
    image: prom/node-exporter:v1.6.1
    volumes:
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /proc:/host/proc:ro
      - /etc/hostname:/etc/nodename # doesn't work with windows
    configs:
      - source: node_exporter_entrypoint
        target: /docker-entrypoint.sh
    environment:
      - NODE_ID={{ '{{.Node.ID}}' }}
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
      - "--collector.textfile.directory=/home/"
      - "--collector.meminfo_numa"
      - "--no-collector.ipvs"
    entrypoint:
      - /bin/sh
      - /docker-entrypoint.sh
    networks:
      - internal
      - monitored
    deploy:
      labels:
        - prometheus-job=node-exporter
        - prometheus-port=9100
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  nvidia-exporter:
    image: mindprince/nvidia_gpu_prometheus_exporter:0.1
    networks:
      - internal
      - monitored
    deploy:
      labels:
        - prometheus-job=nvidia-exporter
        - prometheus-port=9445
      placement:
        constraints:
          - node.labels.gpu==true
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  alertmanager:
    image: prom/alertmanager:v0.25.0
    volumes:
      - alertmanager_data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    networks:
      - internal
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/config.yml
    deploy:
      placement:
        constraints:
          - node.role==manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  cadvisor-exporter:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - internal
      - monitored
    command: --logtostderr --docker_only --allow_dynamic_housekeeping=true
    deploy:
      labels:
        - prometheus-job=cadvisor
        - prometheus-port=8080
      mode: global
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  docker-events-exporter:
    image: itisfoundation/docker-events-exporter:latest
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root # only user root can use the docker socket
    networks:
      - internal
      - monitored
    deploy:
      labels:
        - prometheus-job=docker-events-exporter
        - prometheus-port=8000
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana:
    image: grafana/grafana-oss:10.0.3
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - ./grafana/config.monitoring
    user: "104"
    networks:
      - internal
      - monitored # needed to access postgres
      - public
    deploy:
      #restart_policy:
      #  condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.grafana.loadbalancer.server.port=3000
        - traefik.http.routers.grafana.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/grafana`)
        - traefik.http.routers.grafana.entrypoints=https
        - traefik.http.routers.grafana.tls=true
        - traefik.http.middlewares.grafana_replace_regex.replacepathregex.regex=^/grafana/?(.*)$$
        - traefik.http.middlewares.grafana_replace_regex.replacepathregex.replacement=/$${1}
        - traefik.http.routers.grafana.middlewares=ops_whitelist_ips@docker, ops_gzip@docker, grafana_replace_regex
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana-image-renderer:
    image: grafana/grafana-image-renderer:3.7.1
    configs:
      - source: grafana_image_renderer_config
        target: /usr/src/app/config.json
    networks:
      - internal
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 64M

  smokeping-prober-exporter:
    image: quay.io/superq/smokeping-prober:v0.7.1
    networks:
      - internal
      - monitored
    volumes: []
    cap_add:
      - 'NET_ADMIN'
      - 'NET_RAW'
    entrypoint:
      /bin/smokeping_prober --config.file=/smokeping_prober_config.yaml
    configs:
      - source: smokeping_prober_config
        target: /smokeping_prober_config.yaml
    deploy:
      labels:
        - prometheus-job=smokeping-prober-exporter
        - prometheus-port=9374
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  dcgm-exporter:
    cap_add:
      - SYS_ADMIN
    image: nvidia/dcgm-exporter:3.1.8-3.1.5-ubuntu20.04
    hostname: '{{'{{.Node.Hostname}}'}}'
    networks:
      - internal
      - monitored
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.gpu==true
      resources:
        limits:
          memory: 350M #via trial and error test on tip-deployment DK Aug2023
        reservations:
          memory: 350M #via trial and error test on tip-deployment DK Aug2023
    labels:
      - prometheus-job=dcgm-exporter
      - prometheus-port=9400

  pgsql-query-exporter:
    image: adonato/query-exporter:2.8.3
    volumes: []
    dns: 8.8.8.8
    configs:
      - source: pgsql_query_exporter_config
        target: /config.yaml
    networks:
      - internal
      - monitored
      - public
    extra_hosts: []
    deploy:
      labels: []
      placement:
        constraints:
          - node.labels.prometheus==true
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M{% for _stack in MONITORED_STACK_NAMES.split(",") if _stack != "" %}
  {{_stack}}-postgres-exporter:
    image: bitnami/postgres-exporter:0.13.2
    networks:
      - internal
      - monitored
    environment:
      - DATA_SOURCE_NAME=postgresql://{{POSTGRES_USER}}:{{POSTGRES_PASSWORD}}@{{_stack + '_postgres' if 'rds.amazonaws.com' not in POSTGRES_HOST else POSTGRES_HOST}}:{{POSTGRES_PORT}}/{{POSTGRES_DB}}?sslmode=disable
    deploy:
      placement:
        constraints:
          - node.labels.prometheus==true
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
  {{_stack}}-redis-exporter:
    image: oliver006/redis_exporter:v1.52.0-alpine
    networks:
      - internal
      - monitored
    environment:
      REDIS_ADDR: redis://{{_stack}}_redis:{{REDIS_PORT}}
      REDIS_EXPORTER_CHECK_KEYS: db0=user_id*client_session_id*alive,db0=user_id*client_session_id*resources,db1=project_lock*,db3=*
    deploy:
      placement:
        constraints:
          - node.labels.prometheus==true
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M{% endfor %}
