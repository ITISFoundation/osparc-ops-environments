cert-manager:
  extraArgs:
  - --dns01-recursive-nameservers="8.8.8.8:53"
  - --dns01-recursive-nameservers-only
  skipDNSResolutionCheck: true
  maxConcurrentChallenges: 2
  extraObjects:
  - |
    apiVersion: v1
    kind: Secret
    metadata:
      name: acme-dns-secret
      namespace: {{ .Release.Namespace }}  # secret must be in same namespace as Cert Manager deployment
    type: Opaque
    stringData:
{{ $configDir := requiredEnv "CONFIG_DIR" }}
      acmedns.json: |
{{ readFile (printf "%s/lego-acme-accounts/acme-dns-accounts.json" $configDir) | indent 8 }}
  - |
    apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
      name: cert-issuer
      namespace: {{ .Release.Namespace }}
      annotations:
        # ClusterIssuer depends on cert-manager CRDs. We need to wait for them to be installed before creating the ClusterIssuer
        helm.sh/hook: post-install,post-upgrade
        # Run after startupapicheck job. Thus we ensure webhook server is ready
        # See https://github.com/cert-manager/cert-manager/issues/4155
        # and https://cert-manager.io/docs/concepts/webhook/#webhook-connection-problems-shortly-after-cert-manager-installation
        helm.sh/hook-weight: "10"
    spec:
      acme:
        email: {{ requiredEnv "OSPARC_DEVOPS_MAIL_ADRESS" }}
        server: {{ requiredEnv "DNS_CHALLENGE_ACME_SERVER" }}
        privateKeySecretRef:
          name: cert-manager-acme-private-key
        solvers:
          - dns01:
              cnameStrategy: Follow
              acmeDNS:
                accountSecretRef:
                  name: acme-dns-secret
                  key: acmedns.json
                host: {{ requiredEnv "ACME_DNS_API_BASE" }}
